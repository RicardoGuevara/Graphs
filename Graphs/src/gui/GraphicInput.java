/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.Rectangle;
import javafx.scene.input.KeyCode;
import models.*;

/**
 *
 * @author rick
 */
public class GraphicInput extends javax.swing.JPanel
{

    /**
     * Creates new form GraphicInput
     */
    public GraphicInput()
    {
        initComponents();
        label_fondo_mapa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/seleccion_mapa.jpg")));
        this.requestFocus();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        label_fondo_mapa = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(650, 615));
        addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mousePressed(java.awt.event.MouseEvent evt)
            {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt)
            {
                formMouseReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                formMouseClicked(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyTyped(java.awt.event.KeyEvent evt)
            {
                formKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(label_fondo_mapa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(label_fondo_mapa, javax.swing.GroupLayout.DEFAULT_SIZE, 615, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_formMouseClicked
    {//GEN-HEADEREND:event_formMouseClicked
        clickOnMap(evt.getPoint());
        //System.out.println(graphs.Graphs.grafo);
        this.requestFocus(); //para poder detectar los pressed
    }//GEN-LAST:event_formMouseClicked

    private void formMousePressed(java.awt.event.MouseEvent evt)//GEN-FIRST:event_formMousePressed
    {//GEN-HEADEREND:event_formMousePressed
        startConnection(evt.getPoint());
    }//GEN-LAST:event_formMousePressed

    private void formKeyTyped(java.awt.event.KeyEvent evt)//GEN-FIRST:event_formKeyTyped
    {//GEN-HEADEREND:event_formKeyTyped
        if(ant_selected!=null)if(evt.getKeyCode()==0)delActualNode(this.getGraphics());
    }//GEN-LAST:event_formKeyTyped

    private void formMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_formMouseReleased
    {//GEN-HEADEREND:event_formMouseReleased
        endConnection(evt.getPoint());
    }//GEN-LAST:event_formMouseReleased

    //<editor-fold>
    private void startConnection(Point p)
    {
        start = graphs.Graphs.grafo.getNodeAt(p);
    }
    
    private void endConnection(Point p)
    {
        end = graphs.Graphs.grafo.getNodeAt(p);
        if(start!=null && end!=null && (!(start.equals(end))))
        {
            graphs.Graphs.grafo.add(new Connection(start,end));
            drawConnection(this.getGraphics(),start,end);
        }
    }
    
    private void drawConnection(Graphics g,Node s, Node e)
    {
        g.setColor(Color.BLACK);
        g.drawLine(s.getCenter().x, s.getCenter().y, e.getCenter().x, e.getCenter().y);
    }
    
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="CREAR NODO">
    
    private void clickOnMap(Point p)
    {
        Node<String> n = graphs.Graphs.grafo.getNodeAt(p);
        if(n==null) createNode(p);
        else selectNode(n);
    }
    
    private void createNode(Point p)
    {
        p= new Point(p.x-(int)(Node.diameter/2),p.y-(int)(Node.diameter/2)); //ajusta el punto al centro
        graphs.Graphs.grafo.add(new Node<String>(p));
        drawPoint(this.getGraphics(),p,Color.RED);
        //drawInfo(this.getGraphics(),p,"node");
    }
    
    private void selectNode(Node n)
    {
        if(ant_selected!=null)drawPoint(this.getGraphics(),ant_selected.getLocation(),Color.RED);
        drawPoint(this.getGraphics(),n.getLocation(),Color.BLUE);
        ant_selected = n;
    }
    
    private void drawPoint(Graphics g,Point p,Color color)
    {
        //g.setColor(color.darker().darker().darker().darker()); // señor perdoname por esto 7n7
        //g.setColor(new Color(255-color.getRed(),255-color.getGreen(),255-color.getBlue())); // negativo del color
        g.setColor(Color.BLACK);
        g.drawOval(p.x, p.y, Node.diameter, Node.diameter); // (-3) para evitar sobreponer os bordes
        g.setColor(color);
        //g.fillOval(p.x-point_diameter/2, p.y-point_diameter/2, point_diameter, point_diameter);
        g.fillOval(p.x, p.y, Node.diameter, Node.diameter); // (-3) para evitar sobreponer os bordes
    }
    
    private void drawInfo(Graphics g ,Point p,String s)
    {
        g.setColor(Color.BLACK);
        g.drawString(s, p.x, p.y);
    }
    
    //</editor-fold>
    
    private void delActualNode(Graphics g)
    {
        Rectangle r = ant_selected.getSpace();
        g.clearRect(r.x, r.y, r.width, r.height);
        graphs.Graphs.grafo.del(ant_selected);
        ant_selected=null;
        reloadGraph(this.getGraphics());
    }
    
    private void reloadGraph(Graphics g)
    {
        label_fondo_mapa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/seleccion_mapa.jpg")));
        java.util.ArrayList<Node> nodes = (graphs.Graphs.grafo.getNodes());
        for (Node node : nodes)
        {
            drawPoint(g,node.getLocation(),Color.RED);
        }
        java.util.ArrayList<Connection> cons = (graphs.Graphs.grafo.getConnections());
        for (Connection con : cons)
        {
            drawConnection(g,con.getStart_point(),con.getEnd_point());
        }
        
        this.requestFocus();
    }
    
    private Node    ant_selected,   //anterior nodo seleccionado
                    start,          //inicio de conección
                    end;            //fin de conección
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel label_fondo_mapa;
    // End of variables declaration//GEN-END:variables
}
