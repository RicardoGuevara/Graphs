/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.TrayIcon;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import models.Connection;
import models.Node;

/**
 *
 * @author rick
 */
public class Kill_me_pls extends javax.swing.JPanel
{

    /**
     * Creates new form Kill_me_pls
     */
    public Kill_me_pls()
    {
        initComponents();
    }

    public void paint(Graphics g)
    {
        g.drawImage(new ImageIcon("/gui/seleccion_mapa.jpg").getImage(),getWidth(), getHeight(), this);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    
    void startConnection(Point p)
    {
        start = graphsarbol.GraphsArbol.grafo.getNodeAt(p);
    }
    
    void endConnection(Point p)
    {
        end = graphsarbol.GraphsArbol.grafo.getNodeAt(p);
        if(start!=null && end!=null && (!(start.equals(end))))
        {
            int peso=pedir_valor_arista();
            graphsarbol.GraphsArbol.grafo.add(new Connection(start,end,peso));
            graphsarbol.GraphsArbol.grafo.add(new Connection(end,start,peso));
            drawConnection(getGraphics(),start,end,String.valueOf(peso));
        }
    }
    private int pedir_valor_arista()
    {
        while(true)
        {
            try
            {return Integer.parseInt(JOptionPane.showInputDialog(this, "Peso de la arista", "Digite el peso de la arista", TrayIcon.MessageType.NONE.ordinal()));
            }catch(NumberFormatException nfe)
            {continue;
            }
        }
    }
    
    
    private void drawConnection(Graphics g,Node s, Node e,String peso)
    {
        g.setColor(Color.BLACK);
        g.drawLine(s.getCenter().x, s.getCenter().y, e.getCenter().x, e.getCenter().y);
        g.drawString(peso,(s.getCenter().x+e.getCenter().x)/2,(s.getCenter().y+e.getCenter().y)/2);
    }
    
    private void drawConnectionArbol(Graphics g,Node s, Node e,String peso)
    {
        g.setColor(Color.GREEN);
        Graphics2D d = ((Graphics2D)g);
        d.setStroke(new BasicStroke(3));
        d.drawLine(s.getCenter().x, s.getCenter().y, e.getCenter().x, e.getCenter().y);
        g.drawString(peso,(s.getCenter().x+e.getCenter().x)/2,(s.getCenter().y+e.getCenter().y)/2);
    }
    
    void clickOnMap(Point p)
    {
        Node n = evaluate_colission_box_point(p);
        if(n==null) createNode(p);
        else selectNode(n);
    }
    
    private Node evaluate_colission_box_point(Point p)
    {
        Node n = graphsarbol.GraphsArbol.grafo.getNodeAt(p);
        if(n!=null) return n;
        n = graphsarbol.GraphsArbol.grafo.getNodeAt(new Point(p.x-Node.diameter/2,p.y-Node.diameter/2));
        if(n!=null) return n;
        n = graphsarbol.GraphsArbol.grafo.getNodeAt(new Point(p.x-Node.diameter/2,p.y+Node.diameter/2));
        if(n!=null) return n;
        n = graphsarbol.GraphsArbol.grafo.getNodeAt(new Point(p.x+Node.diameter/2,p.y-Node.diameter/2));
        if(n!=null) return n;
        n = graphsarbol.GraphsArbol.grafo.getNodeAt(new Point(p.x+Node.diameter/2,p.y+Node.diameter/2));
        return n;
    }
    private void createNode(Point p)
    {
        p= new Point(p.x-(int)(Node.diameter/2),p.y-(int)(Node.diameter/2)); //ajusta el punto al centro
        Node n = new Node(p,JOptionPane.showInputDialog(this,"Nombre de este punto","Nombre",TrayIcon.MessageType.NONE.ordinal()));
        if(n.getData()!=null)
        {
            graphsarbol.GraphsArbol.grafo.add(n);
            drawPoint(getGraphics(),p,Color.GRAY);
            drawInfo(getGraphics(),n);
        }
    }
    
    private void selectNode(Node n)
    {
        if(ant_selected!=null)
        {
            drawPoint(getGraphics(),ant_selected.getLocation(),Color.GRAY);
            drawInfo(getGraphics(),ant_selected);
        }
        drawPoint(getGraphics(),n.getLocation(),Color.BLUE);
        drawInfo(getGraphics(),n);
        ant_selected = n;
    }
    
    private void drawPoint(Graphics g,Point p,Color color)
    {
        g.setColor(Color.BLACK);
        Graphics2D d = ((Graphics2D)g);
        d.setStroke(new BasicStroke(1));
        d.drawOval(p.x, p.y, Node.diameter, Node.diameter);
        g.setColor(color);
        g.fillOval(p.x, p.y, Node.diameter, Node.diameter);
    }
    
    private void drawInfo(Graphics g ,Node n)
    {
        g.setColor(Color.WHITE);
        g.drawString((String)n.getData(), n.getLocation().x+5, n.getCenter().y);
    }
    
    
    void delActualNode(Graphics g)
    {
        graphsarbol.GraphsArbol.grafo.del(ant_selected);
        ant_selected=null;
        reloadGraph(getGraphics());
    }
    
    private void reloadGraph(Graphics g)
    {
        //input.paint(g);
        paint(g);
        java.util.ArrayList<Node> nodes = (graphsarbol.GraphsArbol.grafo.getNodes());
        for (Node node : nodes)
        {
            drawPoint(g,node.getLocation(),Color.GRAY);
            drawInfo(g,node);
        }
        java.util.ArrayList<Connection> cons = (graphsarbol.GraphsArbol.grafo.getConnections());
        for (Connection con : cons)
        {
            drawConnection(g,con.getStart_point(),con.getEnd_point(),String.valueOf(con.getWeight()));
        }
        requestFocus();
    }
    
    public void draw_road(ArrayList<Connection> arbol)
    {
        Graphics g = this.getGraphics();
        reloadGraph(g);
        for (Connection arco : arbol)
        {
            drawConnectionArbol(g,arco.getStart_point(),arco.getEnd_point(),String.valueOf(arco.getWeight()));
        }
    }
    
    public Node ant_selected,start,end;       

    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
